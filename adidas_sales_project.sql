-- CREATING EMPTY TABLES

-- Adidas US Sales empty table
CREATE TABLE adidas_sales (
	transaction_id SERIAL PRIMARY KEY,
	retailer VARCHAR(50) NOT NULL,
	retailer_id INTEGER NOT NULL,
	invoice_date TIMESTAMP NOT NULL,
	product VARCHAR(50) NOT NULL,
	price_per_unit INTEGER NOT NULL,
	units_sold INTEGER NOT NULL,
	total_sales INTEGER NOT NULL,
	sales_method VARCHAR(50) NOT NULL
);

-- Adidas US Locations empty table
CREATE TABLE locations (
	transaction_id INTEGER REFERENCES adidas_sales(transaction_id),
	region VARCHAR(25) NOT NULL,
	state VARCHAR(25) NOT NULL,
	city VARCHAR(25) NOT NULL
);

-- JOINING adidas_sales AND locations TABLES
SELECT * FROM adidas_sales
INNER JOIN locations
ON adidas_sales.transaction_id = locations.transaction_id;

-- ANALYSIS AND RESULTS

--What is the revenue generated by each product, ranked from highest to lowest?
SELECT product, SUM(total_sales) AS total_sales
FROM (SELECT adidas_sales.product,
    (adidas_sales.price_per_unit * adidas_sales.units_sold) AS total_sales
  FROM adidas_sales
  INNER JOIN locations
  ON adidas_sales.transaction_id = locations.transaction_id
) AS subquery
GROUP BY product
ORDER BY total_sales DESC;

-- What are the top three products on highest demand in terms of quantity?
SELECT product, SUM(units_sold) AS total_units_sold FROM adidas_sales
INNER JOIN locations
ON adidas_sales.transaction_id = locations.transaction_id
GROUP BY product
ORDER BY total_units_sold DESC
LIMIT 3;

-- Which retailers have the most sales per state?
WITH retailer_state_sales AS (
  SELECT locations.state, adidas_sales.retailer,
    SUM(adidas_sales.price_per_unit * adidas_sales.units_sold) AS total_sales
  FROM adidas_sales
  INNER JOIN locations
  ON adidas_sales.transaction_id = locations.transaction_id
  GROUP BY locations.state, adidas_sales.retailer
),
ranked_retailers AS (
  SELECT state, retailer, total_sales,
    ROW_NUMBER() OVER (PARTITION BY state ORDER BY total_sales DESC) AS rank
  FROM retailer_state_sales
)
SELECT state, retailer, total_sales
FROM ranked_retailers
WHERE rank = 1;

-- Are there any interesting patterns as to when customers buy more products in terms of seasonality?
SELECT 
  CASE 
    WHEN EXTRACT(MONTH FROM invoice_date) IN (12, 1, 2) THEN 'Winter'
    WHEN EXTRACT(MONTH FROM invoice_date) IN (3, 4, 5) THEN 'Spring'
    WHEN EXTRACT(MONTH FROM invoice_date) IN (6, 7, 8) THEN 'Summer'
    WHEN EXTRACT(MONTH FROM invoice_date) IN (9, 10, 11) THEN 'Fall'
  END AS season, SUM(price_per_unit * units_sold) AS total_sales
FROM adidas_sales
GROUP BY season
ORDER BY total_sales;




